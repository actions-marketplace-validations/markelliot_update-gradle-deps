name: Update Gradle dependencies and plugins
description: Uses com.markelliot.versions to update dependencies and plugins
icon: arrow-up-circle
inputs:
  push-to-repo-token:
    description: a GitHub Personal Access Token capable of pushing to the target repository
    required: true
  commit-user:
    description: the username to use when creating an update commit
    required: true
    default: auto-updater
  commit-email:
    description: the email address to use when creating an update commit, typically "<user>@users.noreply.github.com" 
    required: true
  commit-title:
    description: the title to use for the commit
    required: true
    default: Auto-update dependencies and plugins
  primary-branch:
    description: the branch to target updates
    required: true
    default: develop
  working-branch:
    description: the branch from which to submit updates
    required: true
    default: auto/versions
  pr-title:
    description: the title to use for the PR
    required: true
    default: Auto-udpate dependencies and plugins

runs:
  using: composite
  steps:
    - name: Check for new versions
      run: ./gradlew --no-daemon checkNewVersions
    - name: Apply version updates
      run: ./gradlew --no-daemon updateVersionsProps updatePlugins
    - name: Write lockfile
      run: ./gradlew --no-daemon --write-locks
    - name: Create branch and commit changes
      run: |
        # only commit if there are changes
        if [ -z "$(git status --porcelain)" ]; then
          echo "No updates detected"
          exit 0
        fi
        git config --local user.name '${{ inputs.commit-username }}'
        git config --local user.email '${{ inputs.commit-email }}'
        git checkout -B auto/versions
        git commit -am '${{ inputs.commit-title }}'

        # only push changes if different
        if [ -n "$(git ls-remote --exit-code origin '${{ inputs.working-branch }}')" && -z "$(git diff 'origin/${{ inputs.working-branch }}')" ]; then
          echo "No new updates since last update proposal"
          exit 0
        fi
        git push origin -f '${{ inputs.working-branch }}'
    - name: Create Pull Request
      uses: repo-sync/pull-request@v2
      with:
        pr_title: "${{ inputs.pr-title }}"
        destination_branch: "${{ inputs.primary-branch }}"
        source_branch: "${{ inputs.working-branch }}"
        github_token: "${{ inputs.push-to-repo-token }}"
        pr_allow_empty: false

